#include<bits/stdc++.h>
using namespace std;

string intToString(int num) {
    if (num < 0) {
        string str = to_string(-num);
        return "-" + str;
    } else {
        return to_string(num);
    }
}
class Node {
public:
    int value;
    Node* next;
    Node* prev;

    Node(int value) : value(value), next(nullptr), prev(nullptr) {}
};

class ILinkedList {
public:
    virtual void add(int value) = 0;
    virtual bool addToIndex(int index, int value) = 0;
    virtual int get(int index) = 0;
    virtual bool set(int index, int value) = 0;
    virtual void clear() = 0;
    virtual bool isEmpty() = 0;
    virtual bool remove(int index) = 0;
    virtual vector<int> sublist(int start, int end) = 0;
    virtual bool contains(int value) = 0;
    virtual int getSize() = 0;
};

class DoublyLinkedList : public ILinkedList {

public:
    Node* head;
    Node* tail;
    int size;
    DoublyLinkedList() : head(nullptr), tail(nullptr), size(0) {}

    void add(int value) override {
        Node* newNode = new Node(value);
        if (size == 0) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
        size++;
    }

    bool addToIndex(int index, int value) {
        if (index > size || index < 0) {
            cout << "Error\n";
            return 0;
        }
        Node* newNode = new Node(value);
        if (index == 0) {
            if( size == 0 ){
                head = newNode ;
                tail = newNode ;
            }
            else{
                head->prev = newNode ;
                newNode->next = head ;
                head = newNode ; 
            }
        } 
        else if (index == size) {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        } 
        else {
            Node* ptr = head;
            for (int i = 0; i < index; i++) {
                ptr = ptr->next;
            }
            newNode->next = ptr;
            newNode->prev = ptr->prev;
            ptr->prev->next = newNode;
            ptr->prev = newNode;
        }
        size++;
        return 1;
    }

    int get(int index) override {
        if (index < 0 || index >= size) {
            cout << "Error\n";
            return INT_MIN;
        }
        Node* ptr = head;
        for (int i = 0; i < index; i++) {
            ptr = ptr->next;
        }
        return ptr->value;
    }

    bool set(int index, int value) override {
        if (index < 0 || index >= size) {
            cout << "Error\n";
            return 0;
        }
        Node* ptr = head;
        for (int i = 0; i < index; i++) {
            ptr = ptr->next;
        }
        ptr->value = value;
        return 1;
    }

    void clear() override {
        Node* temp;
        while (head) {
            temp = head;
            head = head->next;
            delete temp;
        }
        tail = nullptr;
        size = 0;
    }

    bool isEmpty() override {
        return size == 0;
    }

    bool remove(int index) override {
        if (index < 0 || index >= size) {
            cout << "Error\n";
            return 0;
        }
        Node* ptr = head;
        if (index == 0) {
            if( size == 1 ){
                delete head ;
                head = nullptr ;
                tail = nullptr ;
            }
            else{
                head = head->next ;
                delete head->prev ;
                head->prev = nullptr ;
            }
            return 1 ;
        } 
        else if (index == size - 1) {
            ptr = tail;
            tail = tail->prev;
            tail->next = nullptr;
        } 
        else {
            for (int i = 0; i < index; i++) {
                ptr = ptr->next;
            }
            ptr->prev->next = ptr->next;
            ptr->next->prev = ptr->prev;
        }
        delete ptr;
        size--;
        return 1;
    }

    vector<int> sublist(int fromIndex, int toIndex) override {
        vector<int> sub_l;
        if (fromIndex > toIndex || fromIndex < 0 || toIndex >= size) {
            cout << "Error\n";
            return {INT_MIN};
        }
        Node* ptr = head;
        for (int i = 0; i < fromIndex; i++) {
            ptr = ptr->next;
        }
        for (int i = fromIndex; i <= toIndex; i++) {
            sub_l.push_back(ptr->value);
            ptr = ptr->next;
        }
        return sub_l;
    }

    bool contains(int value) override {
        Node* ptr = head;
        while (ptr != nullptr) {
            if (ptr->value == value) {
                return true;
            }
            ptr = ptr->next;
        }
        return false;
    }

    int getSize() override {
        return size;
    }

    ~DoublyLinkedList() {
        clear();
    }

    void printList() {
        Node* ptr = head;
        cout << "[";
        while (ptr != nullptr) {
            cout << ptr->value;
            ptr = ptr->next;
            if (ptr != nullptr) {
                cout << ", ";
            }
        }
        cout << "]\n";
    }
};

class polynomial{
public:

    DoublyLinkedList list ;

    string printPoly(){
        Node* ptr = list.tail ;
        string poly = "" ;
        int power = list.getSize() - 1 ;
        for( int i = power ; i >= 0 ; --i ){
            if( ptr && ptr->value ){
            if( i != power ){
                poly += ( ptr->value >= 0 ? "+" : "-" ) ;
            }
            else{
                poly += ( ptr->value >= 0 ? "" : "-" ) ;
            }
            if( i > 1 ){
                if( ptr->value == -1 || ptr->value == 1 )
                poly += "x^" + to_string(i) ;
                else
                poly += to_string(abs(ptr->value)) + "x^" + to_string(i) ;
            }
            else if (i == 1){
                if( ptr->value == 1 || ptr->value == -1 )
                poly +=  "x"  ;
                else
                poly += to_string( abs(ptr->value) ) + "x" ;
            }
            else{
                poly += to_string(abs(ptr->value)) ;
            }
            }
            ptr = ptr->prev ;
        }
        return poly ;
    }
    void setPoly( string str_list ){
        list.clear() ;
        str_list = str_list.substr( 1 , str_list.size() - 2 ) ;
        string cur_num = "" ; 
        bool not_empty = 0 , negative = 0 ;
        for( char ch : str_list ){
            if( isdigit(ch) ){
                cur_num += ch ;
                not_empty = 1 ;
            }
            else if ( ch == ',' ){
                if( !negative )
                    list.addToIndex( 0 , stoi( cur_num ) ) ;
                else{
                    list.addToIndex( 0 , -stoi( cur_num ) ) ;
                }
                cur_num = "" ;
                negative = 0 ;
            }
            else if( ch == '-' && cur_num == "" ){
                negative = 1 ;
            }
        }
        if( not_empty ){
            if( !negative )
                list.addToIndex( 0 , stoi( cur_num ) ) ;
            else
                list.addToIndex( 0 , -stoi( cur_num ) ) ;
        }
    }
    float evaluate( float val ){
        float res = 0 ;
        Node* ptr = list.head ;
        int cnt = 0 ; 
        while( ptr ){
            res += pow( val , cnt ) * ptr->value ;
            ptr = ptr->next ;
            cnt++ ;
        }
        return res ;
    }
    polynomial add( polynomial& poly2 ){
        polynomial res ;
        int sz1 = list.size , sz2 = poly2.getSize() ;
        int small = min( sz1 , sz2 ) , big = max( sz1 , sz2 ) ;
        Node* ptr1 = list.head , *ptr2 = poly2.list.head ;
        while( small-- ){
            res.add( ptr1->value + ptr2->value ) ;
            ptr1 = ptr1->next ;
            ptr2 = ptr2->next ;
        }
        if( sz1 == big ){
            while( ptr1 ){
            res.add( ptr1->value ) ;
            ptr1 = ptr1->next ;
            }
        } else{
            while( ptr2 ){
            res.add( ptr2->value ) ;
            ptr2 = ptr2->next ;
        }
    }
        return res ;
    }
    polynomial sub( polynomial& poly2 ){
        polynomial res ;
        int sz1 = list.size , sz2 = poly2.getSize() ;
        int small = min( sz1 , sz2 ) , big = max( sz1 , sz2 ) ;
        Node* ptr1 = list.head , *ptr2 = poly2.list.head ;
        while( small-- ){
            res.add( ptr1->value - ptr2->value ) ;
            ptr1 = ptr1->next ;
            ptr2 = ptr2->next ;
        }
        if( sz1 == big ){
            while( ptr1 ){
            res.add( ptr1->value ) ;
            ptr1 = ptr1->next ;
            }
        } else{
            while( ptr2 ){
            res.add( -ptr2->value ) ;
            ptr2 = ptr2->next ;
        }
    }
        return res ;
    }
    
    void add(int value){
        return list.add(value) ;
    }
    bool addToIndex(int index, int value){
        return list.addToIndex(index,value) ;
    }
    int get(int index){
        return list.get(index) ;
    }
    bool set(int index, int value){
        return list.set(index,value) ;
    }
    void clear(){
        list.clear() ;
    }
    bool isEmpty(){
        return list.isEmpty() ;
    }
    bool remove(int index){
        return list.remove(index) ;
    }
    vector<int> sublist(int start, int end){
        return list.sublist(start,end) ;
    }
    bool contains(int value){
        return list.contains(value) ;
    }
    int getSize(){
        return list.getSize() ;
    }

}; 

class PloynomialSolver {
private: 
    map<char, polynomial> mypolynomials = {
        {'A', polynomial() },
        {'B', polynomial() },
        {'C', polynomial() },
        {'R', polynomial() }
    };
public:
    void setPolynomial(char poly, string str_list ){
        mypolynomials[poly].setPoly(str_list) ;
    }
    string print(char poly){
        return mypolynomials[poly].printPoly() ;
    }
    void clearPolynomial(char poly){
        mypolynomials[poly].clear() ;
    }
    float evaluatePolynomial(char poly, float value){
        return mypolynomials[poly].evaluate(value) ;
    }
    polynomial add(char poly1, char poly2){
        mypolynomials['R'] = mypolynomials[poly1].add( mypolynomials[poly2]) ;
        return mypolynomials['R'] ;
    }
    polynomial subtract(char poly1, char poly2){
        mypolynomials['R'] = mypolynomials[poly1].sub( mypolynomials[poly2]) ;
        return mypolynomials['R'] ;
    }
};

void control_command( string operation , PloynomialSolver& pol1 ){
    if (operation == "set") {
        char poly ;
        cin >> poly ;
        string str_list ;
        cin >> str_list ;
        pol1.setPolynomial(poly , str_list) ;
    }
    else if (operation == "print") {
        char poly ;
        cin >> poly ;
        cout << pol1.print(poly) << "\n" ;
    } 
    else if (operation == "clear") {
        char poly ;
        cin >> poly ;
        pol1.clearPolynomial(poly) ;
        cout <<"[]" ;
    } 
    else if (operation == "eval") {
        char poly ;
        cin >> poly ;
        float val ;
        cin >> val ;
        cout << pol1.evaluatePolynomial(poly ,val) << "\n" ;
    } 
    else if (operation == "add") {
        char poly1 , poly2 ;
        cin >> poly1 ;
        cin >> poly2 ;
        cout << poly1 << " " << poly2 ;
        cout << pol1.add(poly1 , poly2).printPoly() << "\n" ;
    } 
    else if (operation == "sub") {
        char poly1 , poly2 ;
        cin >> poly1 ;
        cin >> poly2 ;
        cout << pol1.subtract(poly1 , poly2).printPoly() << "\n" ;
    } 
    else if (operation == "mult") {
    } 
    else {
        cout << "Error" << endl;
    }
}

int main(){
PloynomialSolver pol1 ;
string command;
while(cin >> command)
    control_command( command , pol1 );

}
