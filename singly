#include<bits/stdc++.h>
using namespace std;

class Node {
public:
    int value;
    Node* next;

    Node(int value) : value(value), next(nullptr) {}
};

class ILinkedList {
public:
    virtual void add(int value) = 0;
    virtual bool addToIndex(int index, int value) = 0;
    virtual int get(int index) = 0;
    virtual bool set(int index, int value) = 0;
    virtual void clear() = 0;
    virtual bool isEmpty() = 0;
    virtual bool remove(int index) = 0;
    virtual vector<int> sublist(int start, int end) = 0;
    virtual bool contains(int value) = 0;
    virtual int getSize() = 0;
};

class SinglLinkedList : public ILinkedList {
private:
    Node* head ;
    int size ;
public:
    SinglLinkedList() : head(nullptr) , size(0) {}

    void add(int value) override {
        if( size == 0 ){
            head = new Node(value) ;
        }
        else
        {
            Node* ptr = head ;
            while( ptr->next ){
                ptr = ptr->next ;
            }
            ptr->next = new Node( value ) ;
        }
        size++ ;
    }
    bool addToIndex(int index, int value) override {
        if( index > size || index < 0 ){
            cout << "Error\n" ; // exception 3la elday2 
            return 0 ;
        }
        Node* ptr = head , *new_node = new Node(value) ;
        if( !index ){
            new_node->next = head ;
            head = new_node ;
        }
        else{
        for (int i = 0; i < index - 1; i++){
            ptr = ptr->next ;
        }
        new_node->next = ptr->next ;
        ptr->next = new_node ;
        }
        size++ ;
        return 1 ;
    }
    int get(int index) override {
        if( index < 0 || index >= size ){
            cout<< "Error\n" ; 
            return INT_MIN ; // i wish this is not provided in test cases
        }
        Node* ptr = head ;
        for (int i = 0; i < index ; i++ ){
            ptr = ptr->next ;
        }
        return ptr->value ;
    }
    bool set(int index , int value) override {
        if( index < 0 || index >= size ){
            cout<< "Error\n" ; 
            return 0 ; 
        }
        Node* ptr = head ;
        for (int i = 0; i < index ; i++ ){
            ptr = ptr->next ;
        }
        ptr->value = value ;
        return 1 ;
    }
    void clear() override {
        Node* temp;
        while (head) {
            temp = head;
            head = head->next;
            delete temp;
        }
        size = 0;
    }
    bool isEmpty(){
        return size == 0 ;
    }
    bool remove(int index) override {
        if( index < 0 || index >= size ){
            cout<< "Error\n" ; 
            return 0 ; 
        }
        Node* ptr = head ;
        if( index == 0 ){
            Node* temp = head ;
            head = head->next ;
            delete temp; 
        }
        else{
            for (int i = 0; i < index-1 ; i++ ){
                ptr = ptr->next ;
            }
            Node* temp = ptr->next ;
            ptr->next = ptr->next->next ;
            delete temp ;
        }
        size-- ;
        return 1 ;
    }
    vector<int> sublist(int fromIndex, int toIndex) override {
        vector<int> sub_l ;
        if( fromIndex > toIndex || fromIndex < 0 || toIndex >= size ){
            cout << "Error\n" ;
            return { INT_MIN } ;
        }
        Node* ptr = head ;
        for (int i = 0; i < fromIndex ; i++ ){
            ptr = ptr->next ;
        }
        for (int i = fromIndex; i <= toIndex; i++) {
            sub_l.push_back(ptr->value);
            ptr = ptr->next;
        }
        return sub_l;
    }
    bool contains(int value) override {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->value == value) {
                return true;
            }
            temp = temp->next;
        }
        return false;
    }

    int getSize() override {
        return size;
    }
    ~SinglLinkedList(){
        clear() ;
    }
    void printList() {
        Node* temp = head;
        cout << "[";
        while (temp != nullptr) {
            cout << temp->value ;
            temp = temp->next;
            if (temp != nullptr) {
                cout << ", ";
            }
        }
        cout << "]\n" ;
    }
};

int main() {

string list_string;
getline(cin, list_string);

SinglLinkedList list ;
string numbers_string ;
list_string = list_string.substr( 1 , list_string.size() - 2 ) ;
string cur_num = "" ; 
bool not_empty = 0 ;
for( char ch : list_string ){
    if( isdigit(ch) ){
        cur_num += ch ;
        not_empty = 1 ;
    }
    else if ( ch == ',' ){
        list.add( stoi( cur_num ) ) ;
        cur_num = "" ;
    }
}
if( not_empty )
    list.add(stoi(cur_num)) ;

string command;
cin >> command;

if (command == "add") {
    int value;
    cin >> value;
    list.add(value);
    list.printList();
}
else if (command == "addToIndex") {
    int index, value;
    cin >> index >> value;
    if ( list.addToIndex(index, value) ) 
        list.printList();
} 
else if (command == "get") {
    int index;
    cin >> index;
    int num = list.get(index) ;
    if( num != INT_MIN )
    cout << num << endl;
} 
else if (command == "set") {
    int index, value;
    cin >> index >> value;
    if( list.set(index, value) )
        list.printList();
} 
else if (command == "clear") {
    list.clear();
    list.printList();
} 
else if (command == "isEmpty") {
    cout << (list.isEmpty() ? "True" : "False") << endl;
} 
else if (command == "remove") {
    int index; 
    cin >> index;
    if(list.remove(index))
        list.printList();
} 
else if (command == "sublist") {
    int start, end;
    cin >> start >> end;
    vector<int> subList = list.sublist(start, end);
    if( subList.size() && subList[0] != INT_MIN ){
    cout << "[";
    for (int i = 0; i < subList.size(); i++) {
        cout << subList[i];
        if (i != subList.size() - 1) {
            cout << ", ";
        }
    }
    cout << "]" << endl;
    }
    else if( subList.empty() ){
        cout << "[]" ;
    }
} 
else if (command == "contains") {
    int value;
    cin >> value;
    cout << (list.contains(value) ? "True" : "False") << endl;
} 
else if (command == "size") {
    cout << list.getSize() << endl;
} 
else {
    cout << "Error" << endl;
}

return 0;
}
